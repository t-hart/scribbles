* The Chronicles of Thomas +Covenant+ and NixOS

** Preamble

    What follows is a patched-together set of notes about how I got my NixOS system from a blank screen to a functional OS.

    *Disclaimer*: I am /not/ an expert (or even very experienced) and thus, the text below might contain a lot of inaccuracies. If you happen to find any, I'd appreciate it if you let me know.

     This is not intended to be a comprehensive guide about how to set up NixOS. It does, however, contain some pieces of information that I was unable to find when working through some issues myself, so it might be of knowledge to some. If at least one person can find a solution to their issue in the text below, I would consider it a success.

*** TL;DR:
     While there is still more to do, my impression so far is wildly positive. The OS-as-configuration approach, ability to perform rollbacks, and transparent builds of the OS feels like a real game changer.

     Overall: I am very happy. I'd recommend anyone who's interested to give it a proper look, but expect to spend some time setting it up--especially if it's your first Linux experience.


** Famous last words

   In the fall of 2018, my trusty Macbook left this world's mortal coil after six years of faithful service. I decided it was time to indulge my curiosity and move over to Linux.

 Aside from a little bit of Ubuntu for educational purposes, I had no prior experience with Linux. I didn't have any particular affinity for any particular distro, but I had recently heard of NixOS and was very intrigued by the whole 'functional OS' bit (having recently fallen in love with functional programming). Thus I decided to give it a go.

/How hard can it be, right?/

** Hardware
   I picked up a 15" Dell XPS 9570 with 32GB RAM and a six-core i9 CPU (can you tell I don't know my hardware?). Worth noting: this computer comes with an onboard Intel GPU and a discrete NVidia GeForce GTX 1050 Ti Mobile. This would end up causing me quite a bit of trouble.

** Other requirements
   I wanted to keep a Windows partition in case I would end up needing it, and I wanted a shared drive where I could put data that was independent of the OS.

** Display and ~nomodeset~
   The first issue I ran into, and which delayed me by a couple of months after it first reared its head was the fact that trying to boot into the graphical installer on the USB only gave me a non-blinking caret in the top left of the screen.

*** Solution
    Turns out this was caused initially by pressing ~F2~ at startup and just assuming that re-organizing the boot order would take care of it. When I instead used ~F12~ and manually selected the NixOS USB to boot from it magically worked.

    I'm not entirely sure why, but I imagine it is because it automatically adds ~nomodeset~ as a kernel parameter when doing it this way (please tell me if this is not correct!). The reason I think this might be the case is that even after going through with the installation, NixOS would boot into the blank screen with a caret unless I added the ~nomodeset~ to ~boot.kernelParams~.

    Note that I later removed this due to issues with external monitors.

** Shared drive // NTFS
   To share a drive between Linux and Windows I decided (after some very shallow research indicating that Linux could both read and write to them) to go with using an NTFS drive.

What I didn't realize, was that you need `ntfs-3g` (`ntfs3g` in `nixpkgs`) to mount it as writable. Furthermore, you are unable to mount it permanently due to it being unsupported on some level.

*** Mounting post-boot
    The way I got around this was through this bit of config:
    #+begin_src
      boot.postBootCommands = ''
        mount -t ntfs-3g <drive to mount, e.g. /dev/nvme0n1p11> <mount point>
        '';
    #+end_src

*** Alternative solution
    On doing some more research while writing this, I came across [[https://nixos.wiki/wiki/NTFS][this article]] on the NixOS wiki on NTFS. It suggests setting ~boot.supportedFileSystems = [ "ntfs" ];~. +Whether this solves saving the mount point or not, I have yet to find out.+

    /This does not work./ There is no config option that is ~boot.supportedFileSystems~. There /is/, however, a ~boot.initrd.supportedFileSystems~. Whether this does the same thing or not, I don't know. At the moment, this is not my focus.

** Audio
   I have run into a couple of issues with audio, some of which I have not been able to find the solution to.

   Selecting outputs mostly works, but I seem to be unable to select HDMI/DisplayPort for audio output, which means that I need to route the audio elsewhere (such as through my dock's output) instead. Not a show-stopper, but I'd love to get this sorted.

** CalDigit TS3+ dock and Digital Optical Audio
   I have a Caldigit TS3+ dock to which I have connected all peripherals. This dock has a digital optical audio output.

After realizing I wasn't having any luck with getting the audio through DP setup to work on Linux and after seeing the DA out listed in audio sinks (is that what we call the outputs in the Linux world?), I decided I'd give it a run for its money.

I bought a Digital Audio Converter (DAC) and hooked it up to my Mackie Big Knob. On the plus side, this allows me to separate the computer audio from other audio sources (notably, my Nintendo Switch).

However, there is an issue: the audio cuts of intermittently. Only for about half a second or so, and then resumes. I first noticed with Spotify, where, on a good run, it'd happen about once every 20 minutes or so, while on a bad run, it'd be about every second (though not in a steady beat). I tried consulting the Arch wiki [[https://wiki.archlinux.org/index.php/PulseAudio/Troubleshooting#Glitches.2C_skips_or_crackling][article]] about the PulseAudio driver and glitches based on an AskUbuntu issue that cited this as a solution, but it seems to have no effect.

Now, what might point me in the direction of the underlying cause is the following curiosity:
I was browsing Netflix, watching some trailers (through mouseover), and while it worked just fine with Spotify playing in the background, if I paused Spotify, the trailer audio would get super choppy (about once a second). Unpausing Spotify would fix the issue, even if I lowered its volume to zero.

However, using Netflix's video player to watch a trailer, the audio was perfectly smooth. Given that this was only a short 2 minute watch, I don't know how it would behave over a longer period, though, like YouTube and Spotify, it's likely it'd give out once every so often.

Furthermore, often when booting or waking from sleep, the audio is super choppy until I restart the PulseAudio service. This tends to decrease the frequency down to the aforementioned 20 minutes or so.

This seems to indicate that there is something going on with the audio driver and detection of whether there is sound playing, but I don't know enough to figure it out just yet. More research is needed.

** External monitors
   This has been the biggest pain point so far. I spent a solid two-three weeks trying to get any external monitors up and running with no luck at all.
   # [[https://discourse.nixos.org/t/external-monitors-not-working-dell-xps/1799a][discourse thread]]
*** The death of Alacritty
*** Removing ~nomodeset~
** Other resources
   In addition to the [[https://nixos.org/nixos/manual][NixOS manual]], I thoroughly recommend checking out the [[https://wiki.archlinux.org/][Arch wiki]] ([[https://wiki.archlinux.org/index.php/Dell_XPS_15_9570][here's]] the article for this particular laptop), even if you might need to figure out how to apply the correct settings in NixOS.

Furthermore, [[https://grahamc.com/blog/nixos-on-dell-9560][NixOS on a Dell 9560]] by Graham Christensen and [[https://chris-martin.org/2015/installing-nixos][Installing NixOS]] were very useful.
